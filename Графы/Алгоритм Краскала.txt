#include <fstream>
using namespace std;

ifstream fin("In.txt");
ofstream fout("Out.txt");

int main()
{
	int N, i, j, I, J, p1, p2, max1, maxk1, sumk1, g = 1, T = -1, sumW = 0, u = 1;

	fin >> N;
	
	int **matrW = new int*[N], **buk = new int*[N/2],  **matrWM = new int*[N],  *k1 = new int[N];
 
	for(i = 0; i<N; i++)
	{
		matrW[i] = new int[N];
		matrWM[i] = new int[N];
		k1[i] = 0;
	}

	for(i = 0; i<N/2; i++)
	{
		buk[i] = new int[N];
		for(j = 0; j<N; j++)
			buk[i][j] = 0;
	}
 
	for(i = 0; i<N; i++)
		for(j = 0; j<N; j++)
		{
			fin >> matrW[i][j];   // ввод матрицы весов*
			matrWM[i][j] = 0;
		}
 
	while(g != 0)
	{
		// поиск по матрице макс ребра
		g = 0;
		max1 = 0;
		
		for(i = 0; i<N; i++)
			for(j = i; j<N; j++)
				if(matrW[i][j]>max1)
				{
					max1 = matrW[i][j]; 
					I = i;
					J = j;
				}
		
		fout << "Шаг" << u << ": ребро - (" << I+1 << "; " << J+1 << ")";
		u++;

		// проверка на наличие вершин I и J в наших букетах
		for(i = 0; i <= T; i++)  
		{
			if(buk[i][I] =  = I+1)
				k1[i] += 1;
			if(buk[i][J] =  = J+1)
				k1[i] += 1;
		}

		maxk1 = 0; 
		sumk1 = 0; 
		for(i = 0; i<N; i++)
		{
			if(k1[i]>maxk1) 
				maxk1 = k1[i]; 
			
			sumk1 += k1[i]; 
		}

		if(maxk1 != 2)  // else случай1(оранжевое ребро)
		{
			if(sumk1 =  = 2)  // случай2(объединение букетов)
			{
				i = 0; 
				p1 = N+1; 
				while(i<N)
				{
					if(k1[i] =  = 1)
					{
						if(p1>N)
							p1 = i; 
						else
						{
							p2 = i; 
							break; 
						}
					}
					
					i++;
				}

				for(i = 0; i<N; i++)
					if(buk[p2][i]>buk[p1][i]) 
						swap(buk[p2][i], buk[p1][i]); 

				for(i = 0; i<N; i++)
					swap(buk[T][i], buk[p2][i]); 

				matrWM[I][J] = matrW[I][J]; 
				T--; 
			}
		  
			if(sumk1 =  = 1)  // случай3(добавление ребра в соответствующий букет)
			{
				for(i = 0; i<N; i++)
					if(k1[i] =  = 1)
						break; 
				
				buk[i][I] = I+1;
				buk[i][J] = J+1;
				matrWM[I][J] = matrW[I][J];
			}
		  
			if(sumk1 =  = 0)  // случай4(новый букет)
			{
				T++;
				buk[T][I] = I+1;
				buk[T][J] = J+1;
				matrWM[I][J] = matrW[I][J];
			}
		}
		else 
			fout << " - оранжевое"; 
		
		matrW[I][J] = 0;

		for(i = 0; i<N; i++)
		{
			if(buk[0][i] =  = 0)
				g++;  // g-показатель кол-ва нулевых эл-тов в букете(1)
			
			k1[i] = 0; 
		}

		for(i = 0; i <= T; i++)
		{
			fout << endl << "букет" << i+1 << ": "; 
			
			for(j = 0; j<N; j++) 
				fout << buk[i][j] << " "; 
			
			fout << endl; 
		}
	}
  
	// вывод matrWM
	for(i = 0; i<N; i++)
	{
		for(j = 0; j<N; j++)
		{
			fout << matrWM[i][j];   
			sumW += matrWM[i][j]; 
		}
		
		fout << endl; 
	}
	
	fout << endl << "Ves dereva = " << sumW; 
 
	return 0; 
}
   