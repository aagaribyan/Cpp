#include <iostream>
#include <math.h>
using namespace std;

int main()
{
 int i, j;
 
 // многочлен Лагранжа
 double x[4]={0.1,0.5,0.9,1.3}, f[4], om[4], X_x[4];
 double L=0, l, X=0.8, delL;
 
 for(i=0;i<4;i++)
  {
   f[i]=log(x[i])+x[i];
   om[i]=1;
   
   for(j=0;j<4;j++)
     if(j!=i) 
	   om[i]*=(x[i]-x[j]);
   
   X_x[i]=X-x[i];
  }
  
 for(i=0;i<4;i++)
  {
   l=f[i]/om[i];
   
   for(j=0;j<4;j++)
     if(j!=i) 
	   l*=X_x[j];
   
   L+=l;
  }
  
 delL=fabs(log(X)+X-L);
 
 cout<<"Lagranj:"<<endl<<"L="<<L<<endl<<"delta L(0.8)="<<delL<<endl<<endl;
 
 
 // многочлен Ньютона
 double x2[4]={0.1,0.5,1.1,1.3}, M[4][4], X_x2[4], koef[4], P, delP;
 
 for(i=0;i<4;i++)
   for(j=0;j<4;j++)
     M[i][j]=0;
 
 for(i=0;i<4;i++)
  {
   M[0][i]=log(x2[i])+x2[i];
   X_x2[i]=X-x2[i];
   koef[i]=1;
  }
  
 for(i=1;i<4;i++)
   for(j=0;j<4-i;j++)
   {
     M[i][j]=(M[i-1][j]-M[i-1][j+1])/(x2[j]-x2[j+i]);
     koef[i]*=X_x2[j];
   }
  
 P=M[0][0];
 for(i=1;i<4;i++)
  P+=M[i][0]*koef[4-i];

 delP=fabs(log(X)+X-P);

 cout<<"Nyuton:"<<endl<<"P="<<P<<endl<<"delta P(0.8)="<<delP<<endl<<endl;
    
 return 0;
}
